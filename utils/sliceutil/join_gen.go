// Code generated by "github.com/beanscc/rango/cmd/genericgenerator -method join -etype int8,int16,int,int32,int64,uint8,uint16,uint,uint32,uint64,float32,float64,string"; DO NOT EDIT.

package sliceutil

import (
	"fmt"
	"reflect"
	"strconv"
)

// Join 切片元素以字符串形式拼接
func Join(slice interface{}, sep string) string {
	switch slice.(type) {
	case []int8:
		return JoinInt8s(slice.([]int8), sep)
	case []int16:
		return JoinInt16s(slice.([]int16), sep)
	case []int:
		return JoinInts(slice.([]int), sep)
	case []int32:
		return JoinInt32s(slice.([]int32), sep)
	case []int64:
		return JoinInt64s(slice.([]int64), sep)
	case []uint8:
		return JoinUint8s(slice.([]uint8), sep)
	case []uint16:
		return JoinUint16s(slice.([]uint16), sep)
	case []uint:
		return JoinUints(slice.([]uint), sep)
	case []uint32:
		return JoinUint32s(slice.([]uint32), sep)
	case []uint64:
		return JoinUint64s(slice.([]uint64), sep)
	case []float32:
		return JoinFloat32s(slice.([]float32), sep)
	case []float64:
		return JoinFloat64s(slice.([]float64), sep)
	case []string:
		return JoinStrings(slice.([]string), sep)
	default:
		rv := reflect.ValueOf(slice)
		if rv.Kind() != reflect.Slice {
			panic("only support slice")
		}
		l := rv.Len()
		return JoinFunc(l, sep, func(i int) string {
			return fmt.Sprint(rv.Index(i).Interface())
		})
	}
}

// JoinInt8s []int8 切片元素以字符串形式拼接
func JoinInt8s(slice []int8, sep string) string {
	return JoinFunc(len(slice), sep, func(i int) string {
		return strconv.Itoa(int(slice[i]))
	})
}

// JoinInt16s []int16 切片元素以字符串形式拼接
func JoinInt16s(slice []int16, sep string) string {
	return JoinFunc(len(slice), sep, func(i int) string {
		return strconv.Itoa(int(slice[i]))
	})
}

// JoinInts []int 切片元素以字符串形式拼接
func JoinInts(slice []int, sep string) string {
	return JoinFunc(len(slice), sep, func(i int) string {
		return strconv.Itoa(slice[i])
	})
}

// JoinInt32s []int32 切片元素以字符串形式拼接
func JoinInt32s(slice []int32, sep string) string {
	return JoinFunc(len(slice), sep, func(i int) string {
		return strconv.FormatInt(int64(slice[i]), 10)
	})
}

// JoinInt64s []int64 切片元素以字符串形式拼接
func JoinInt64s(slice []int64, sep string) string {
	return JoinFunc(len(slice), sep, func(i int) string {
		return strconv.FormatInt(slice[i], 10)
	})
}

// JoinUint8s []uint8 切片元素以字符串形式拼接
func JoinUint8s(slice []uint8, sep string) string {
	return JoinFunc(len(slice), sep, func(i int) string {
		return strconv.FormatUint(uint64(slice[i]), 10)
	})
}

// JoinUint16s []uint16 切片元素以字符串形式拼接
func JoinUint16s(slice []uint16, sep string) string {
	return JoinFunc(len(slice), sep, func(i int) string {
		return strconv.FormatUint(uint64(slice[i]), 10)
	})
}

// JoinUints []uint 切片元素以字符串形式拼接
func JoinUints(slice []uint, sep string) string {
	return JoinFunc(len(slice), sep, func(i int) string {
		return strconv.FormatUint(uint64(slice[i]), 10)
	})
}

// JoinUint32s []uint32 切片元素以字符串形式拼接
func JoinUint32s(slice []uint32, sep string) string {
	return JoinFunc(len(slice), sep, func(i int) string {
		return strconv.FormatUint(uint64(slice[i]), 10)
	})
}

// JoinUint64s []uint64 切片元素以字符串形式拼接
func JoinUint64s(slice []uint64, sep string) string {
	return JoinFunc(len(slice), sep, func(i int) string {
		return strconv.FormatUint(slice[i], 10)
	})
}

// JoinFloat32s []float32 切片元素以字符串形式拼接
func JoinFloat32s(slice []float32, sep string) string {
	return JoinFunc(len(slice), sep, func(i int) string {
		return strconv.FormatFloat(float64(slice[i]), 'f', -1, 64)
	})
}

// JoinFloat64s []float64 切片元素以字符串形式拼接
func JoinFloat64s(slice []float64, sep string) string {
	return JoinFunc(len(slice), sep, func(i int) string {
		return strconv.FormatFloat(slice[i], 'f', -1, 64)
	})
}

// JoinStrings []string 切片元素以字符串形式拼接
func JoinStrings(slice []string, sep string) string {
	return JoinFunc(len(slice), sep, func(i int) string {
		return slice[i]
	})
}
